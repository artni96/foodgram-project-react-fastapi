name: CI

on:
  push:
    branches: [ main ]
    pull_request: [ main ]

jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.11.0
#      - name: Install dependencies
#        run: |
#          cd backend
#          pip install poetry
#          poetry config virtualenvs.create false
#          poetry install --no-interaction --no-ansi
#
#      - name: Ruff linter check
#        run: |
#          ruff check
#          ruff format
#  container-job:
#    runs-on: ubuntu-latest

#    services:
#      postgres:
#        image: postgres
#        env:
#          POSTGRES_PASSWORD: postgres
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@v4
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Connect to PostgreSQL
#        run: node client.js
#
#        env:
#          POSTGRES_HOST: postgres
#          POSTGRES_PORT: 5432
#      - name: check db
#        run: |
#          docker ps -a
#          docker exec foodgram-test curl localhost/status

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.0
      - name: Install dependencies
        run: |
          cd backend
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
      - name: Install wkhtmltopdf
        run: |
          sudo apt-get update
          sudo apt-get install wkhtmltopdf

      - name: Ruff linter check
        run: |
          ruff check
          ruff format

      - name: tests
        env:
          MODE: ${{ secrets.MODE }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_USER_PASSWORD: ${{ secrets.DB_USER_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          ALGORITHM: ${{ secrets.ALGORITHM }}

        run: |
          cd infra
          docker compose -f docker-compose-tests.yml up -d --build
          docker container logs tests
          cd ../backend
          pytest
